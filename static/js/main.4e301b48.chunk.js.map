{"version":3,"sources":["classes.js","Navigation.js","algComponent/BubbleSort.js","algComponent/MergeSort.js","algComponent/QuickSort.js","Util.js","Panel.js","algComponent/SelectionSort.js","algComponent/InsertionSort.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","margin","marginBottom","spacing","menuButton","marginRight","title","grid","paper","padding","textAlign","color","palette","text","secondary","display","flexDirection","sortbutton","marginLeft","width","height","paperfornums","Navigation","classes","className","AppBar","position","Toolbar","Typography","variant","IconButton","aria-label","href","getBubbleSortAnimation","array","animation","length","i","j","push","temp","bubbleSort","getMergeSortAnimations","animations","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","tempArray","slice","doMerge","getQuickSortFirstAnimations","quickSortFirst","start","end","pivotIdx","pivotValue","lower","run","partition","randomGenerator","random","initColor","changeColor","PrettoSlider","withStyles","thumb","backgroundColor","border","marginTop","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","Panel","useState","setAmount","speed","setSpeed","isrunning","setRunning","initArray","setArray","Grid","container","item","xs","Paper","elevation","slider","gutterBottom","valueLabelDisplay","defaultValue","min","max","onChange","event","newVal","newarray","disabled","console","log","Button","onClick","e","animationArray","setTimeout","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","newHeight","mergeSort","smallest","smallestIdx","selectionSort","getSelectionSortAnimations","quickSort","insertionSort","getInsertionSortAnimations","maxElement","map","value","idx","maxArraySize","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4e301b48.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    margin:{\r\n        marginBottom: theme.spacing(3),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    grid: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n        \r\n        display:'flex',\r\n        flexDirection:'row',\r\n    },\r\n    sortbutton:{\r\n        marginLeft:theme.spacing(5),\r\n        width:200,\r\n        height:40\r\n    },\r\n    paperfornums:{\r\n        height: 470,\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import React from 'react'\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport makeStyles from './classes'\r\n\r\n\r\n\r\nconst Navigation = () => {\r\n    const classes = makeStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Sorting Visualization\r\n                    </Typography>\r\n                   \r\n                    <IconButton \r\n                        color=\"inherit\"    \r\n                        aria-label=\"delete\"\r\n                        href=\"https://github.com/willproj/sorting-visualization-web\"\r\n                    >   \r\n                        <GitHubIcon/>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","function getBubbleSortAnimation(array){\r\n    const animation=[];\r\n    bubbleSort(array,animation);\r\n    return animation;\r\n}\r\n\r\nfunction bubbleSort(array,animation){\r\n    let length=array.length;\r\n    for(let i=0;i<length-1;i++){\r\n        for(let j=0;j<length-i-1;j++){\r\n            if(array[j]>array[j+1]){\r\n                animation.push([j,j+1]);\r\n                animation.push([j,j+1]);\r\n                animation.push([j,array[j+1]]);\r\n                animation.push([j+1,array[j]]);\r\n                let temp=array[j];\r\n                array[j]=array[j+1];\r\n                array[j+1]=temp;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default getBubbleSortAnimation;","export default function getMergeSortAnimations(array) {\r\n    //takes a unsorted array\r\n    //initiate a new array for record and animation\r\n    const animations = [];\r\n    //if array size is 1, it is sorted, return array without doing merge sort\r\n    if (array.length <= 1) return array;\r\n    //sort the array using merge sort and return a animation array\r\n    mergeSortHelper(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, animations) {\r\n    // if starting and end is the same, array is sorted, return array\r\n    if (startIdx === endIdx) return;\r\n    //find out the middle index\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    //calling recursively with first part of the array\r\n    mergeSortHelper(mainArray, startIdx, middleIdx, animations);\r\n    //calling recursively with second part of the array\r\n    mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\r\n    //once two smaller pieces are ready, merge them\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, animations) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    const tempArray = mainArray.slice();\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        //comparing i and j, both the start of each array\r\n        //record it in animation array\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (tempArray[i] <= tempArray[j]) {\r\n            animations.push([k, tempArray[i]]);\r\n            //following is equivalent to mainArray[k]=auxiliaryArray[i]; k++, i++\r\n            //adjusts the true mainArray\r\n            mainArray[k++] = tempArray[i++];\r\n        } else {\r\n            animations.push([k, tempArray[j]]);\r\n            mainArray[k++] = tempArray[j++];\r\n        }\r\n    }\r\n    //for cases that one side is smaller than the other side\r\n    //just move the sorted items on that side over to mainArray\r\n    while (i <= middleIdx) {\r\n        animations.push([k, i]);\r\n        animations.push([k, i]);\r\n        animations.push([k, tempArray[i]]);\r\n        mainArray[k++] = tempArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([k, j]);\r\n        animations.push([k, j]);\r\n        animations.push([k, tempArray[j]]);\r\n        mainArray[k++] = tempArray[j++];\r\n    }\r\n}\r\n","//Always selecting the first element as pivot\r\nexport default function getQuickSortFirstAnimations(array) {\r\n    const animations = [];\r\n    let start = 0;\r\n    let end = array.length - 1;\r\n    quickSortFirst(array, start, end, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function quickSortFirst(array, start, end, animations) {\r\n    if (start >= end) {\r\n      return;\r\n    }\r\n    let pivotIdx = partition(array, start, end, animations);\r\n    quickSortFirst(array, start, pivotIdx - 1, animations);\r\n    quickSortFirst(array, pivotIdx + 1, end, animations);\r\n  }\r\n  \r\n  function partition(array, start, end, animations) {\r\n    let pivotValue = array[start];\r\n    let lower = start + 1;\r\n    let run = true;\r\n    while (run) {\r\n      while (array[lower] <= pivotValue && lower <= end) {\r\n        animations.push([start, lower]);\r\n        animations.push([start, lower]);\r\n        animations.push([0, array[0]]);\r\n        animations.push([0, array[0]]);\r\n        lower += 1;\r\n      }\r\n      while (array[end] >= pivotValue && lower <= end) {\r\n        animations.push([start, end]);\r\n        animations.push([start, end]);\r\n        animations.push([0, array[0]]);\r\n        animations.push([0, array[0]]);\r\n        end -= 1;\r\n      }\r\n      if (end < lower) {\r\n        run = false;\r\n      } else {\r\n        animations.push([lower, end]);\r\n        animations.push([lower, end]);\r\n        animations.push([lower, array[end]]);\r\n        animations.push([end, array[lower]]);\r\n        let temp = array[lower];\r\n        array[lower] = array[end];\r\n        array[end] = temp;\r\n      }\r\n    }\r\n    animations.push([start, end]);\r\n    animations.push([start, end]);\r\n    animations.push([start, array[end]]);\r\n    animations.push([end, pivotValue]);\r\n    let temp = array[end];\r\n    array[end] = pivotValue;\r\n    array[start] = temp;\r\n    return end;\r\n  }\r\n  ","export default function randomGenerator(start, end) {\r\n    return Math.floor((Math.random() * end) + start);\r\n}\r\n\r\n\r\nexport function findMax(array) {\r\n    let max = array[0];\r\n    for (let i = 1; i < array.length; i++)\r\n        max = max < array[i] ? array[i] : max;\r\n    return max;\r\n}\r\n\r\nexport const initArraySize=20;\r\nexport const minArraySize=5;\r\nexport const maxArraySize=100;\r\nexport const minElement=10;\r\nexport const maxElement=450;\r\nexport const maxSpeed=200;\r\nexport const minSpeed=1;\r\nexport const initSpeed=150;\r\nexport const initColor = 'turquoise';\r\nexport const changeColor= 'red';\r\n\r\n","import React, { useState } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport useStyles from './classes';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport getBubbleSortAnimation from './algComponent/BubbleSort'\r\n\r\nimport getInsertionSortAnimations from './algComponent/InsertionSort'\r\nimport getMergeSortAnimations from './algComponent/MergeSort'\r\nimport getQuickSortFirstAnimations from './algComponent/QuickSort'\r\nimport getSelectionSortAnimations from './algComponent/SelectionSort'\r\n\r\nimport randomGenerator, {\r\n    initArraySize, minElement, maxElement,\r\n    initSpeed, initColor, changeColor, maxArraySize, findMax, maxSpeed, minSpeed, minArraySize\r\n} from './Util'\r\n\r\n\r\nconst PrettoSlider = withStyles({\r\n    root: {\r\n        color: '#52af77',\r\n        height: 8,\r\n        width: 200,\r\n    },\r\n    thumb: {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: '#fff',\r\n        border: '2px solid currentColor',\r\n        marginTop: -8,\r\n        marginLeft: -12,\r\n        '&:focus, &:hover, &$active': {\r\n            boxShadow: 'inherit',\r\n        },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n        left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n    rail: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n})(Slider);\r\n\r\n\r\nconst Panel = () => {\r\n\r\n    const classes = useStyles();\r\n    const [amount, setAmount] = useState(initArraySize);\r\n    const [speed, setSpeed] = useState(initSpeed);\r\n    const [isrunning, setRunning] = useState(false);\r\n\r\n    const [array, setArray] = useState(() => {\r\n        const initArray = [];\r\n        for (let i = 0; i < initArraySize; i++) {\r\n            initArray.push(randomGenerator(minElement, maxElement));\r\n        }\r\n        return initArray;\r\n    });\r\n\r\n    const handleAmountChange = (event, newVal) => {\r\n        setAmount(newVal);\r\n        const newarray = [];\r\n        for (let i = 0; i < newVal; i++) {\r\n            newarray.push(randomGenerator(minElement, maxElement));\r\n        }\r\n        setArray(newarray);\r\n    }\r\n\r\n    const handleSpeedChange = (event, newVal) => {\r\n        console.log(speed);\r\n        setSpeed(maxSpeed - newVal);\r\n    }\r\n\r\n    const bubbleSort = () => {\r\n        const animationArray = getBubbleSortAnimation(array);\r\n        setTimeout(() => { setRunning(false) }, animationArray.length * speed);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        for (let i = 0; i < animationArray.length; i++) {\r\n            const colorChange = i % 4 <= 1;\r\n            if (colorChange) {\r\n                const [barOneIdx, barTwoIdx] = animationArray[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 4 === 0 ? changeColor : initColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * speed);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animationArray[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * speed);\r\n            }\r\n        }\r\n    }\r\n\r\n    const mergeSort = () => {\r\n\r\n        const animationArray = getMergeSortAnimations(array);\r\n        setTimeout(() => { setRunning(false) }, animationArray.length * speed);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < animationArray.length; i++) {\r\n            const colorChange = i % 3 !== 2;\r\n            if (colorChange) {\r\n                const [barOneIdx, barTwoIdx] = animationArray[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? changeColor : initColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * speed);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animationArray[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * speed);\r\n            }\r\n        }\r\n    }\r\n\r\n    const quickSort = () => {\r\n        const animationArray = getQuickSortFirstAnimations(array);\r\n        setTimeout(() => { setRunning(false) }, animationArray.length * speed);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < animationArray.length; i++) {\r\n            const colorChange = i % 4 <= 1;\r\n            if (colorChange) {\r\n                const [barOneIdx, barTwoIdx] = animationArray[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 4 === 0 ? changeColor : initColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * speed);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animationArray[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * speed);\r\n            }\r\n        }\r\n    }\r\n\r\n    const insertionSort = () => {\r\n        const animationArray = getInsertionSortAnimations(array);\r\n        setTimeout(() => { setRunning(false) }, animationArray.length * speed);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < animationArray.length; i++) {\r\n            const colorChange = i % 4 <= 1;\r\n            if (colorChange) {\r\n                const [barOneIdx, barTwoIdx] = animationArray[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 4 === 0 ? changeColor : initColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * speed);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animationArray[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * speed);\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectionSort = () => {\r\n        const animationArray = getSelectionSortAnimations(array);\r\n        setTimeout(() => { setRunning(false) }, animationArray.length * speed);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < animationArray.length; i++) {\r\n            const colorChange = i % 4 <= 1;\r\n            if (colorChange) {\r\n                const [barOneIdx, barTwoIdx] = animationArray[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 4 === 0 ? changeColor : initColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * speed);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animationArray[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * speed);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div className={classes.margin} />\r\n            <div className={classes.grid}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={3}>\r\n                        <Paper className={classes.paper} elevation={2}>\r\n                            <div className={classes.slider}>\r\n                                <Typography gutterBottom>Amount</Typography>\r\n                                <PrettoSlider valueLabelDisplay=\"auto\"\r\n                                    aria-label=\"pretto slider\" defaultValue={initArraySize}\r\n                                    min={minArraySize} max={maxArraySize}\r\n                                    onChange={handleAmountChange}\r\n                                    disabled={isrunning}\r\n                                />\r\n                                <Typography gutterBottom>Speed</Typography>\r\n                                <PrettoSlider valueLabelDisplay=\"auto\"\r\n                                    aria-label=\"pretto slider\" defaultValue={initSpeed}\r\n                                    min={minSpeed} max={maxSpeed}\r\n                                    onChange={handleSpeedChange}\r\n                                    disabled={isrunning}\r\n                                />\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={9}>\r\n                        <Paper className={classes.paper} elevation={2}>\r\n                            <Button variant=\"outlined\" color=\"primary\" className={classes.sortbutton}\r\n                                disabled={isrunning}\r\n                                onClick={(e) => mergeSort()}\r\n                            >\r\n                                Merge Sort\r\n                            </Button>\r\n                            <Button variant=\"outlined\" color=\"primary\" className={classes.sortbutton}\r\n                                onClick={(e) => bubbleSort()}\r\n                                disabled={isrunning}\r\n                            >\r\n                                Bubble Sort\r\n                            </Button>\r\n                            <Button variant=\"outlined\" color=\"primary\" className={classes.sortbutton}\r\n                                onClick={(e) => selectionSort()}\r\n                            >\r\n                                Selection Sort\r\n                            </Button>\r\n                            <Button variant=\"outlined\" color=\"primary\" className={classes.sortbutton}\r\n                                onClick={(e) => quickSort()}>\r\n                                Quick Sort\r\n                            </Button>\r\n                        </Paper>\r\n                        <div className={classes.margin} />\r\n                        <Paper className={classes.paper} elevation={2}>\r\n                            <Button variant=\"outlined\" color=\"primary\"\r\n                                disabled={true}\r\n                                className={classes.sortbutton}>\r\n                                Radix Sort (MSD)\r\n                            </Button>\r\n                            <Button variant=\"outlined\" color=\"primary\"\r\n                                disabled={true}\r\n                                className={classes.sortbutton}>\r\n                                Radix Sort (LSD)\r\n                            </Button>\r\n                            <Button variant=\"outlined\" color=\"primary\" className={classes.sortbutton}\r\n                                onClick={(e) => insertionSort()}\r\n                            >\r\n                                Insertion Sort\r\n                            </Button>\r\n                            <Button variant=\"outlined\" color=\"primary\" className={classes.sortbutton}\r\n                                disabled={true}\r\n                            >\r\n                                Bucket Sort\r\n                            </Button>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Paper className={classes.paperfornums} elevation={2}>\r\n                            <div\r\n                                className=\"single-bar\"\r\n                                style={{\r\n                                    height: `${maxElement + 20}px`,\r\n                                    width: `${0}px`\r\n                                }}\r\n                            ></div>\r\n                            {array.map((value, idx) => {\r\n                                return <div\r\n                                    className=\"array-bar\"\r\n                                    key={idx}\r\n                                    style={{\r\n                                        backgroundColor: initColor,\r\n                                        height: `${value}px`,\r\n                                        width: `${maxArraySize * 10 / array.length}px`\r\n                                    }}></div>\r\n                            })}\r\n                        </Paper>\r\n\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Panel;","//loop through and places the smallest element at the start\r\nexport default function getSelectionSortAnimations(array) {\r\n  const animations = [];\r\n  selectionSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction selectionSort(array, animations) {\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    let smallest = array[i];\r\n    let smallestIdx = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      animations.push([smallestIdx, j]);\r\n      animations.push([smallestIdx, j]);\r\n      animations.push([0, array[0]]);\r\n      animations.push([0, array[0]]);\r\n      if (array[j] < smallest) {\r\n        //updates the smallest element and its index\r\n        smallest = array[j];\r\n        smallestIdx = j;\r\n      }\r\n    }\r\n    animations.push([i, smallestIdx]);\r\n    animations.push([i, smallestIdx]);\r\n    animations.push([i, smallest]);\r\n    animations.push([smallestIdx, array[i]]);\r\n    let temp = array[i];\r\n    array[i] = smallest;\r\n    array[smallestIdx] = temp;\r\n  }\r\n}\r\n","//While advancing to the right, every bar on the left is sorted\r\n//for every new bar, insert it into the right place on the left\r\nexport default function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n    insertionSort(array, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function insertionSort(array, animations) {\r\n    for (let i = 0; i < array.length; i++) {\r\n      for (let j = i; j > 0; j--) {\r\n        if (array[j] < array[j - 1]) {\r\n          animations.push([j, j - 1]);\r\n          animations.push([j, j - 1]);\r\n          animations.push([j - 1, array[j]]);\r\n          animations.push([j, array[j - 1]]);\r\n          let temp = array[j];\r\n          array[j] = array[j - 1];\r\n          array[j - 1] = temp;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ","import React from 'react'\r\nimport Navigation from './Navigation'\r\nimport Panel from './Panel'\r\nimport './Bar.css';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div>\r\n            <Navigation />\r\n            <Panel />\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default App;","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));"],"sourceRoot":""}